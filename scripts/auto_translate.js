#!/usr/bin/env node

/**
 * auto_translate.js - Auto-translate missing keys using a translation service
 * Marks auto-translated entries for human review
 */

import fs from 'fs';
import path from 'path';

// Translation mapping for common terms
const TRANSLATION_MAP = {
  // Navigation
  "Home": "ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©",
  "Demo": "ÿßŸÑÿπÿ±ÿ∂ ÿßŸÑÿ™Ÿàÿ∂Ÿäÿ≠Ÿä", 
  "Team": "ÿßŸÑŸÅÿ±ŸäŸÇ",
  "Resources": "ÿßŸÑŸÖŸàÿßÿ±ÿØ",
  
  // Common UI elements
  "Loading": "ÿ¨ÿßÿ±Ÿç ÿßŸÑÿ™ÿ≠ŸÖŸäŸÑ",
  "Save": "ÿ≠ŸÅÿ∏",
  "Cancel": "ÿ•ŸÑÿ∫ÿßÿ°",
  "Delete": "ÿ≠ÿ∞ŸÅ",
  "Edit": "ÿ™ÿπÿØŸäŸÑ",
  "View": "ÿπÿ±ÿ∂",
  "Download": "ÿ™ŸÜÿ≤ŸäŸÑ",
  "Upload": "ÿ±ŸÅÿπ",
  "Search": "ÿ®ÿ≠ÿ´",
  "Filter": "ÿ™ÿµŸÅŸäÿ©",
  "Sort": "ÿ™ÿ±ÿ™Ÿäÿ®",
  "Settings": "ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™",
  "Help": "ŸÖÿ≥ÿßÿπÿØÿ©",
  "Close": "ÿ•ÿ∫ŸÑÿßŸÇ",
  "Open": "ŸÅÿ™ÿ≠",
  "Yes": "ŸÜÿπŸÖ",
  "No": "ŸÑÿß",
  "OK": "ŸÖŸàÿßŸÅŸÇ",
  "Error": "ÿÆÿ∑ÿ£",
  "Success": "ŸÜÿ¨ÿßÿ≠",
  "Warning": "ÿ™ÿ≠ÿ∞Ÿäÿ±",
  "Info": "ŸÖÿπŸÑŸàŸÖÿßÿ™",
  
  // Forms and inputs
  "Name": "ÿßŸÑÿßÿ≥ŸÖ",
  "Email": "ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä",
  "Password": "ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±",
  "Submit": "ÿ•ÿ±ÿ≥ÿßŸÑ",
  "Reset": "ÿ•ÿπÿßÿØÿ© ÿ™ÿπŸäŸäŸÜ",
  "Required": "ŸÖÿ∑ŸÑŸàÿ®",
  "Optional": "ÿßÿÆÿ™Ÿäÿßÿ±Ÿä",
  
  // Model terms (keep English)
  "TabKANet": "TabKANet",
  "QSVC": "QSVC",
  
  // File formats (keep English)
  ".csv": ".csv",
  ".json": ".json",
  ".parquet": ".parquet",
  ".pt": ".pt",
  ".onnx": ".onnx",
  
  // Technical terms with Arabic
  "Machine Learning": "ÿßŸÑÿ™ÿπŸÑŸÖ ÿßŸÑÿ¢ŸÑŸä",
  "Deep Learning": "ÿßŸÑÿ™ÿπŸÑŸÖ ÿßŸÑÿπŸÖŸäŸÇ",
  "Neural Network": "ÿßŸÑÿ¥ÿ®ŸÉÿ© ÿßŸÑÿπÿµÿ®Ÿäÿ©",
  "Dataset": "ŸÖÿ¨ŸÖŸàÿπÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™",
  "Training": "ÿßŸÑÿ™ÿØÿ±Ÿäÿ®",
  "Validation": "ÿßŸÑÿ™ÿ≠ŸÇŸÇ",
  "Testing": "ÿßŸÑÿßÿÆÿ™ÿ®ÿßÿ±",
  "Accuracy": "ÿßŸÑÿØŸÇÿ©",
  "Precision": "ÿßŸÑÿØŸÇÿ©",
  "Recall": "ÿßŸÑÿßÿ≥ÿ™ÿØÿπÿßÿ°",
  "Model": "ÿßŸÑŸÜŸÖŸàÿ∞ÿ¨",
  "Algorithm": "ÿßŸÑÿÆŸàÿßÿ±ÿ≤ŸÖŸäÿ©",
  "Performance": "ÿßŸÑÿ£ÿØÿßÿ°",
  "Optimization": "ÿßŸÑÿ£ŸÖÿ´ŸÑÿ©",
  "Parameters": "ÿßŸÑŸÖÿπŸÑŸÖÿßÿ™",
  "Hyperparameters": "ÿßŸÑŸÖÿπŸÑŸÖÿßÿ™ ÿßŸÑŸÅÿßÿ¶ŸÇÿ©",
  "Configuration": "ÿßŸÑÿ•ÿπÿØÿßÿØ",
  
  // Common phrases
  "Start Training": "ÿ®ÿØÿ° ÿßŸÑÿ™ÿØÿ±Ÿäÿ®",
  "View Results": "ÿπÿ±ÿ∂ ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨",
  "Export Model": "ÿ™ÿµÿØŸäÿ± ÿßŸÑŸÜŸÖŸàÿ∞ÿ¨",
  "Upload Data": "ÿ±ŸÅÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™",
  "Select File": "ÿßÿÆÿ™ÿ± ŸÖŸÑŸÅŸãÿß",
  "Process Data": "ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™",
  "Train Model": "ÿ™ÿØÿ±Ÿäÿ® ÿßŸÑŸÜŸÖŸàÿ∞ÿ¨",
  "Evaluate Model": "ÿ™ŸÇŸäŸäŸÖ ÿßŸÑŸÜŸÖŸàÿ∞ÿ¨"
};

function translateText(text, targetLang = 'ar') {
  // First check our manual translation map
  if (TRANSLATION_MAP[text]) {
    return TRANSLATION_MAP[text];
  }
  
  // For demo purposes, return placeholder Arabic text
  // In production, you would integrate with Google Translate API or similar
  if (targetLang === 'ar') {
    // Check if it's a technical term or model name that should stay in English
    if (isModelName(text) || isTechnicalTerm(text)) {
      return text; // Keep English
    }
    
    // Simple auto-translation placeholder
    return `[AR: ${text}]`; // Placeholder for human translation
  }
  
  return text;
}

function isModelName(text) {
  const modelNames = ['TabKANet', 'QSVC', 'CNN', 'RNN', 'LSTM', 'GAN', 'VAE'];
  return modelNames.some(name => text.includes(name));
}

function isTechnicalTerm(text) {
  const techTerms = ['.csv', '.json', '.pt', '.onnx', 'CLI', 'API', 'HTTP', 'GPU', 'CPU'];
  return techTerms.some(term => text.includes(term));
}

function deepTranslate(obj, targetLang = 'ar', prefix = '') {
  const result = {};
  
  for (const [key, value] of Object.entries(obj)) {
    if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
      result[key] = deepTranslate(value, targetLang, prefix ? `${prefix}.${key}` : key);
    } else if (typeof value === 'string') {
      const translated = translateText(value, targetLang);
      
      // Mark as auto-translated if it's different from original and not in our manual map
      if (translated !== value && !TRANSLATION_MAP[value]) {
        result[key] = {
          _value: translated,
          _autoTranslated: true,
          _originalValue: value,
          _needsReview: true
        };
      } else {
        result[key] = translated;
      }
    } else {
      result[key] = value;
    }
  }
  
  return result;
}

function flattenTranslatedObject(obj) {
  const result = {};
  
  for (const [key, value] of Object.entries(obj)) {
    if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
      if (value._autoTranslated) {
        result[key] = value._value;
      } else {
        result[key] = flattenTranslatedObject(value);
      }
    } else {
      result[key] = value;
    }
  }
  
  return result;
}

async function main() {
  const LOCALES_DIR = 'src/i18n/locales';
  const EN_FILE = path.join(LOCALES_DIR, 'en.json');
  const AR_FILE = path.join(LOCALES_DIR, 'ar.json');
  
  try {
    console.log('üîÑ Auto-translating missing keys...');
    
    // Read existing files
    if (!fs.existsSync(EN_FILE)) {
      throw new Error(`English locale file not found: ${EN_FILE}`);
    }
    
    const enData = JSON.parse(fs.readFileSync(EN_FILE, 'utf8'));
    let arData = {};
    
    if (fs.existsSync(AR_FILE)) {
      arData = JSON.parse(fs.readFileSync(AR_FILE, 'utf8'));
    }
    
    // Create merged translations
    const translatedData = deepTranslate(enData, 'ar');
    
    // Merge with existing Arabic translations (preserve manual translations)
    function mergeTranslations(existing, translated) {
      const result = { ...translated };
      
      for (const [key, value] of Object.entries(existing)) {
        if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
          if (result[key] && typeof result[key] === 'object') {
            result[key] = mergeTranslations(value, result[key]);
          } else {
            result[key] = value; // Keep existing translation
          }
        } else {
          result[key] = value; // Keep existing translation
        }
      }
      
      return result;
    }
    
    const mergedData = mergeTranslations(arData, translatedData);
    const finalData = flattenTranslatedObject(mergedData);
    
    // Write the updated Arabic file
    fs.writeFileSync(AR_FILE, JSON.stringify(finalData, null, 2));
    
    // Count auto-translated entries for reporting
    const autoTranslatedCount = JSON.stringify(translatedData).match(/"_autoTranslated":true/g)?.length || 0;
    
    console.log(`‚úÖ Translation complete!`);
    console.log(`üìù ${autoTranslatedCount} entries auto-translated and marked for review`);
    console.log(`üìÇ Updated file: ${AR_FILE}`);
    console.log(`üí° Review entries marked with [AR: ...] placeholders`);
    
  } catch (error) {
    console.error('‚ùå Auto-translation failed:', error.message);
    process.exit(1);
  }
}

// ES module check
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}
